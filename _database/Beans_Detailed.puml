@startuml

class LoginBean {
    - Integer id
    - Integer role
    - String username
    - String usedPassword
    - String hashedpassword
    - String salt
    - String firstname
    - String lastname
    - String phonenumber
    - Boolean adminPrivileges
    - Integer languageId
    - String errorMessage
    - Boolean isLoggedIn
    + String login()
    + String logout()
}

class GhostNetBean {
    - int id
    - String posLongitude
    - String posLatitude
    - Integer size
    - ReportBean firstReportBean
    - ReportBean latestReportBean
    + Integer getId()
    + void setId(Integer id)
    + String getPosLatitude()
    + void setPosLatitude(String posLatitude)
    + String getPosLongitude()
    + void setPosLongitude(String posLongitude)
    + Integer getSize()
    + void setSize(Integer size)
    + List<GhostNetBean> getAllGhostNets()
    + List<GhostNetBean> getGhostNetsByStatusId(Integer inputStatusId)
    + List<GhostNetBean> getGhostNetsReportedMissing()
    + String submitData(Integer inputUserId)
    + ReportBean getFirstReportBean()
    + void setFirstReportBean(ReportBean firstReportBean)
    + ReportBean getLatestReportBean()
    + void setLatestReportBean(ReportBean latestReportBean)
    + void createReport(Integer inputUserId, int statusId)
    + String getSnippetForMapMarker()
    + Integer getLatestId()
    + void setStatusToReported(Integer inputUserId)
    + void setStatusToSalvagePending(Integer inputUserId)
    + void setStatusToRecovered(Integer inputUserId)
    + void setStatusToReportedMissing(Integer inputUserId)
    + void setStatusToMissing(Integer inputUserId)
    + String getAgeOfReport()
    + List<ReportBean> getReportsByUserId(Integer inputUserId)
    + String getLabelForPosition()
    + List<GhostNetBean> getAllActiveGhostNets()
    + List<GhostNetBean> getAllRecoveredGhostNetsByUserId(Integer inputUserId)
    + String getDetailsForMapMarker(Integer inputFirstReportedTimeStampLabel, String inputUserLabel, String inputStatusLabel, Integer inputLanguageId)
    + String getViewDetailsLink()
}

class ReportBean {
    - Integer id
    - Integer userId
    - String userNameLabel
    - Integer ghostNetId
    - Integer statusId
    - String statusLabel
    - Integer timestamp
    - String timestampLabel
    + Integer getId()
    + void setId(Integer idValue)
    + Integer getUserId()
    + void setUserId(Integer userIdValue)
    + String getUserNameLabel() throws ClassNotFoundException
    + void setUserNameLabel(String userNameLabel)
    + Integer getGhostNetId()
    + void setGhostNetId(Integer ghostNetId)
    + Integer getStatusId()
    + void setStatusId(Integer statusVal)
    + Integer getTimestamp()
    + void setTimestamp(Integer timestamp)
    + String getTimestampLabel()
    + void setTimestampLabel(String timestampLabel)
    + String getAgeOfReport()
}

class StatisticBean {
    - Integer ghostNetsinDB
    - Integer ghostNetsWithStatusReported
    - Integer ghostNetsWithStatusSalvagePending
    - Integer ghostNetsWithStatusRecovered
    - Integer ghostNetsWithStatusReportedMissing
    - Integer ghostNetsWithStatusMissing
    + Integer getGhostNetsInDB() throws ClassNotFoundException
    + Integer getGhostNetsWithStatusReported() throws ClassNotFoundException
    + Integer getGhostNetsWithStatusSalvagePending() throws ClassNotFoundException
    + Integer getGhostNetsWithStatusRecovered() throws ClassNotFoundException
    + Integer getGhostNetsWithStatusReportedMissing() throws ClassNotFoundException
    + Integer getGhostNetsWithStatusMissing() throws ClassNotFoundException
}

class LabelBean {
    - Map<Integer, String> sizeLabels
    - Map<Integer, String> statusLabels
    - Map<Integer, String> userRoleLabels
    - Map<Integer, String> userNameLabels
    + LabelBean() throws ClassNotFoundException
    + Map<Integer, String> getSizeLabels()
    + Map<Integer, String> getStatusLabels()
    + Map<Integer, String> getUserRoleLabels()
    + Map<Integer, String> getUserNameLabels()
    + String getSizeLabelById(Integer inputSizeId, Integer inputLanguageId)
    + String getStatusLabelById(Integer inputStatusId, Integer inputLanguageId)
    + String getUserRoleLabelById(Integer inputUserRoleId, Integer inputLanguageId)
    + String getUserNameLabelById(Integer inputUserId, Integer inputLanguageId)
}

class TestBean {
    - List<String> outputLog
    + TestBean()
    + String createEntryForLog(String inputTxt)
    + String startTest() throws ClassNotFoundException, InterruptedException
    + Boolean sumbmitGhostNet()
    + List<String> getOutputLog()
    + void setOutputLog(List<String> outputLog)
}

class DataController {
    + DataController()
    + String loginUser(LoginBean inputBean) throws ClassNotFoundException
    + void sendNewGhostNetData(Integer inputNewId, String inputLatitude, String inputLongitude, Integer inputSize) throws ClassNotFoundException
    + Integer sumEntriesInDBByStatus(Integer statusValue) throws ClassNotFoundException
    + List<GhostNetBean> getAllRecoveredGhostNetsByUserId(Integer inputUserId) throws ClassNotFoundException
    + GhostNetBean getGhostNetBeanById(int inputId) throws ClassNotFoundException
    + List<GhostNetBean> getAllGhostNets() throws ClassNotFoundException
    + String getAttributesFromDBUsers(Integer inputUserId, int modeSwitch) throws ClassNotFoundException
    + void createReportForGhostNet(Integer inputUserId, Integer inputGhostNetId, int inputStatusId) throws ClassNotFoundException
    + String getSnippetForMapMarker(Integer inputStatusId)
    + int getLatestGhostNetId() throws ClassNotFoundException
    + List<ReportBean> getReportsByUserId(Integer inputUserId) throws ClassNotFoundException
    + Integer getCurrentUnixTime()
    + String getDurationHumanReadable(Integer inputTimestampA, Integer inputTimestampB)
    + String getLabelForPositionFromCache(int inputGhostNetId) throws ClassNotFoundException
    + String getLabelForPositionFromService(Integer inputGhostNetId, String inputLatitude, String inputLongitude) throws ClassNotFoundException
    + void saveGeoNameResultToCache(Integer inputGhostNetId, String inputGeoNameLabel) throws ClassNotFoundException
    + List<GhostNetBean> getGhostNetsByStatusId(Integer inputStatusId) throws ClassNotFoundException
    + Map<Integer, String> getLabels(Integer inputModeSwitch) throws ClassNotFoundException
    + String getLabel(LabelBean inputLabelBean, Integer inputModeSwitch, Integer inputWorkVal, Integer inputLanguageId)
    + String getDetailsForMapMarker(Integer inputFirstReportedTimeStampLabel, String inputUserNameLabel, String inputStatusLabel, Integer inputLanguageId)
    + Boolean testCompareLatestStatusId(int inputGhostNetId, int inputCompareStatusVal) throws ClassNotFoundException
    + void testDeleteGhostNet(Integer inputValueId) throws ClassNotFoundException
    + void testDeleteReports(Integer inputValueId) throws ClassNotFoundException
    + String getUnixTimestampHumanReadableForLog()
}

class DataService {
    + String login(LoginBean inputBean) throws ClassNotFoundException
    + GhostNetBean getGhostNetBeanById(int inputId) throws ClassNotFoundException
    + List<GhostNetBean> getAllRecoveredGhostNetsByUserId(Integer inputUserId) throws ClassNotFoundException
    + List<GhostNetBean> getGhostNetsByStatusId(int inputStatusId) throws ClassNotFoundException
    + List<GhostNetBean> getAllGhostNets() throws ClassNotFoundException
    + Boolean testCompareLatestStatusId(int inputGhostNetId, int inputCompareStatusValue) throws ClassNotFoundException
    + void testDeleteGhostNet(Integer inputId) throws ClassNotFoundException
    + void testDeleteReports(Integer inputId) throws ClassNotFoundException
    + ReportBean getReportBeanForGhostNet(Integer ghostNetId, Integer modeswitch) throws ClassNotFoundException
    + void createReportForGhostNet(Integer inputUserId, Integer inputGhostNetId, Integer inputStatusId) throws ClassNotFoundException
    + void sendNewGhostNetData(Integer inputNewId, String inputLatitude, String inputLongitude, Integer inputSize) throws ClassNotFoundException
    + String getAttributesFromDBUsers(Integer inputUserId, int modeSwitch) throws ClassNotFoundException
    + Integer sumEntriesInDBByStatus(Integer statusValue) throws ClassNotFoundException
    + List<ReportBean> getReportsByUserId(Integer inputUserId) throws ClassNotFoundException
    + Integer getLatestGhostNetId() throws ClassNotFoundException
    + String getDetailsForMapMarker(Integer inputFirstReportedTimeStampLabel, String inputUserNameLabel, String inputStatusLabel, Integer inputLanguageId)
    + Map<Integer, String> getLabels(int modeSwitch) throws ClassNotFoundException
    + String getLabel(LabelBean inputLabelBean, Integer modeSwitch, Integer inputWorkVal, Integer workLanguageId)
    + String getUnixTimestampHumanReadableForLog()
    + Integer getCurrentUnixTime()
    + String getSnippetForMapMarker(Integer inputStatusId)
    + void createSQLDebugEntry(String inputMethodName, String inputQuery) throws ClassNotFoundException
    + String getDurationHumanReadable(Integer timestampA, Integer timestampB)
}

class DataServiceGeoNames {
    + String getPositionLabelFromService(String inputLatitude, String inputLongitude)
    + String getLabelForPositionFromCache(int inputGhostNetId) throws ClassNotFoundException
    + void saveGeoNameResultToCache(Integer inputGhostNetId, String inputGeoNameLabel) throws ClassNotFoundException
    + Integer getCurrentUnixTime()
}

LoginBean --> DataController : uses
GhostNetBean --> DataController : uses
ReportBean --> DataController : uses
StatisticBean --> DataController : uses
LabelBean --> DataController : uses
TestBean --> DataController : uses
DataController --> DataService : uses
DataController --> DataServiceGeoNames : uses

@enduml
